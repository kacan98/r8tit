using Microsoft.AspNetCore.Mvc;
using R8titAPI.Data;
using R8titAPI.Dtos;
using R8titAPI.Models;
using R8titAPI.Helpers;
using Microsoft.AspNetCore.Authorization;
using AutoMapper;

using System.Data;
using Dapper;

namespace R8titAPI.Controllers
{
    [Authorize]
    [Route("api/[controller]")]
    [ApiController]
    public class AuthController : ControllerBase
    {
        private readonly IMapper _mapper;
        private readonly DataContextDapper _dapper;
        private readonly SqlHelper _sqlHelper;
        private readonly AuthHelper _authHelper;

        public AuthController(IConfiguration config)
        {
            _sqlHelper = new SqlHelper(config);
            _authHelper = new AuthHelper(config);
            _dapper = new DataContextDapper(config);
            _mapper = new Mapper(new MapperConfiguration(c =>
            {
                c.CreateMap<UserForRegistrationDto, User>()
                .ForMember(dest => dest.UserId, opt => opt.Ignore())  // UserId will be generated by the database
                .ForMember(dest => dest.ImageId, opt => opt.Ignore())  // ImageId might be added later
                .ForMember(dest => dest.Active, opt => opt.MapFrom(src => true));  // Set Active to true by default
            }));
        }

        [AllowAnonymous]
        [HttpPost("register")]
        public IActionResult Register(UserForRegistrationDto userForRegistration)
        {
            if (AuthHelper.IsEmailValid(userForRegistration.Email) == false)
            {
                return new ObjectResult(new { message = "Invalid email!" })
                {
                    StatusCode = 400
                };
            }

            if (userForRegistration.Password != userForRegistration.PasswordConfirm)
            {
                return BadRequest("Passwords do not match!");
            }

            //Check that the password is strong enough
            if (AuthHelper.IsPasswordStrongEnough(userForRegistration.Password) == false)
            {
                return new ObjectResult(new { message = "Password is not strong enough!" })
                {
                    StatusCode = 400
                };
            }

            string sqlCheckUserExists = "SELECT Email FROM R8titSchema.Auth WHERE Email = '" +
                userForRegistration.Email + "'";

            IEnumerable<string> existingUsers = _dapper.LoadData<string>(sqlCheckUserExists);
            if (existingUsers.Count() != 0)
            {
                return BadRequest("User with this email already exists!");
            }

            UserForLoginDto userForSetPassword = new UserForLoginDto()
            {
                Email = userForRegistration.Email,
                Password = userForRegistration.Password
            };
            if (_authHelper.SetPassword(userForSetPassword) == false)
            {
                throw new Exception("Failed to set password.");
            }
            User user = _mapper.Map<User>(userForRegistration);
            user.Active = true;

            if (_sqlHelper.UpsertUser(user))
            {
                return Ok();
            }
            throw new Exception("Failed to add user.");

        }

        [AllowAnonymous]
        [HttpPost("login")]
        public IActionResult Login(UserForLoginDto userForLogin)
        {
            string sqlForHashAndSalt = @"EXEC R8titSchema.spLoginConfirmation_Get
                @Email = @EmailParameter";

            DynamicParameters sqlParameters = new();
            sqlParameters.Add("@EmailParameter", userForLogin.Email, DbType.String);

            try
            {

                UserForLoginConfirmationDto userForConfirmation = _dapper.LoadDataSingle<UserForLoginConfirmationDto>(sqlForHashAndSalt, sqlParameters);
                byte[] passwordHash = _authHelper.GetPasswordHash(userForLogin.Password, userForConfirmation.PasswordSalt);

                // if (passwordHash == userForConfirmation.PasswordHash) // Won't work
                for (int index = 0; index < passwordHash.Length; index++)
                {
                    if (passwordHash[index] != userForConfirmation.PasswordHash[index])
                    {
                        return StatusCode(401, "Incorrect password!");
                    }
                }
                string token = _authHelper.CreateToken(userForConfirmation.UserId);
                return Ok(new { token, userId = userForConfirmation.UserId });
            }
            catch (System.Exception)
            {
                return StatusCode(401, "User with this email does not exist!");
            }
        }

        [HttpPut("ResetPassword")]
        public IActionResult ResetPassword(UserForLoginDto userForSetPassword)
        {
            if (_authHelper.SetPassword(userForSetPassword))
            {
                return Ok();
            }
            throw new Exception("Failed to update password!");
        }

        [HttpPut("refreshToken")]
        public IActionResult RefreshToken()
        {
            var userIdClaim = User.FindFirst("userId");
            if (userIdClaim == null)
            {
                return Unauthorized();
            }

            string token = _authHelper.CreateToken(int.Parse(userIdClaim.Value));
            return Ok(new { token });
        }
    }
}